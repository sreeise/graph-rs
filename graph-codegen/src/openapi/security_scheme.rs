use crate::openapi::OAuthFlows;
use from_as::*;
use std::{
    convert::TryFrom,
    io::{Read, Write},
};

/// [Security Schemes Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#securitySchemeObject)
#[derive(Default, Debug, Clone, Serialize, Deserialize, FromFile, AsFile)]
#[serde(rename_all = "camelCase")]
pub struct SecurityScheme {
    /// REQUIRED. The type of the security scheme. Valid values are "apiKey",
    /// "http", "mutualTLS", "oauth2", "openIdConnect".
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub type_: Option<String>,

    /// REQUIRED. The type of the security scheme. Valid values are "apiKey",
    /// "http", "mutualTLS", "oauth2", "openIdConnect".
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// REQUIRED. The name of the header, query or cookie parameter to be used.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// REQUIRED. The location of the API key. Valid values are "query",
    /// "header" or "cookie".
    #[serde(rename = "in")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub in_: Option<String>,

    /// REQUIRED. The name of the HTTP Authorization scheme to be used in the
    /// Authorization header as defined in RFC7235. The values used SHOULD be
    /// registered in the IANA Authentication Scheme registry.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub scheme: Option<String>,

    /// A hint to the client to identify how the bearer token is formatted.
    /// Bearer tokens are usually generated by an authorization server, so this
    /// information is primarily for documentation purposes.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub bearer_format: Option<String>,

    /// REQUIRED. An object containing configuration information for the flow
    /// types supported.
    pub flows: OAuthFlows,

    /// REQUIRED. OpenId Connect URL to discover OAuth2 configuration values.
    /// This MUST be in the form of a URL. The OpenID Connect standard requires
    /// the use of TLS.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub open_id_connect_url: Option<String>,
}
